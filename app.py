# -*- coding: utf-8 -*-
"""Deployment of AI solutions Final Term

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ai4Bel5B-DaTaZoFnwmdG2gBhSM4ivtG

# Data Analysis Project : Group D
"""
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

def data_analysis(data, output_dir):
    # Create the output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)

    # Display basic statistics
    data_description = data.describe()
    data_description.to_csv(os.path.join(output_dir, 'basic_statistics.csv'))

    # Display a pair plot and save as an image
    pair_plot = sns.pairplot(data, markers='o', diag_kind='hist')
    pair_plot.savefig(os.path.join(output_dir, 'pair_plot.png'))
    plt.close(pair_plot.fig)  # Close the figure associated with the PairGrid

    # Correlation Heatmap and save as an image
    correlation_matrix = data.corr()
    heatmap = sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)
    heatmap.figure.savefig(os.path.join(output_dir, 'correlation_heatmap.png'))
    plt.close(heatmap.figure)  # Close the figure associated with the heatmap

    # Boxplot for each feature and save as an image
    boxplot = data.boxplot(figsize=(10, 8), rot=45)
    boxplot.figure.savefig(os.path.join(output_dir, 'boxplot.png'))
    plt.close(boxplot.figure)  # Close the figure associated with the boxplot

    # Distribution of Age and save as an image
    histplot = sns.histplot(data['Age'], bins=20, kde=True)
    histplot.figure.savefig(os.path.join(output_dir, 'age_distribution.png'))
    plt.close(histplot.figure)  # Close the figure associated with the histplot

# Function to handle file upload
def handle_file_upload():
    file_path = input("Enter the local path of the CSV file for analysis: ")
    return file_path

if __name__ == '__main__':
    # Allow users to enter the local path of a CSV file
    file_path = handle_file_upload()

    try:
        # Perform data analysis if data is provided
        if file_path:
            data = pd.read_csv(file_path)
            
            # Create an output directory to store analysis results and plots
            output_directory = 'analysis_output'
            
            # Call the data_analysis function with the data and output directory
            data_analysis(data, output_directory)
            
            print(f"Analysis results and plots saved to '{output_directory}'")

        else:
            print("No data provided for analysis.")

    except FileNotFoundError:
        print('File not found. Please check the file path and try again.')
